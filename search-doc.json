{"searchDocs":[{"title":"First Blog Post","type":0,"sectionRef":"#","url":"/typegraphql-relay-connections/blog/first-blog-post","content":"Woohoo, enjoy the documentation release for this project!","keywords":"","version":null},{"title":"Class: ForwardPaginationArgs<CursorType>","type":0,"sectionRef":"#","url":"/typegraphql-relay-connections/docs/api/classes/ForwardPaginationArgs","content":"","keywords":"","version":"Next"},{"title":"Type parameters​","type":1,"pageTitle":"Class: ForwardPaginationArgs<CursorType>","url":"/typegraphql-relay-connections/docs/api/classes/ForwardPaginationArgs#type-parameters","content":" Name\tTypeCursorType\textends Cursor = Cursor  ","version":"Next","tagName":"h2"},{"title":"Implemented by​","type":1,"pageTitle":"Class: ForwardPaginationArgs<CursorType>","url":"/typegraphql-relay-connections/docs/api/classes/ForwardPaginationArgs#implemented-by","content":" FullPaginationArgs  ","version":"Next","tagName":"h2"},{"title":"Constructors​","type":1,"pageTitle":"Class: ForwardPaginationArgs<CursorType>","url":"/typegraphql-relay-connections/docs/api/classes/ForwardPaginationArgs#constructors","content":" ","version":"Next","tagName":"h2"},{"title":"constructor​","type":1,"pageTitle":"Class: ForwardPaginationArgs<CursorType>","url":"/typegraphql-relay-connections/docs/api/classes/ForwardPaginationArgs#constructor","content":" • new ForwardPaginationArgs&lt;CursorType&gt;(): ForwardPaginationArgs&lt;CursorType&gt;  Type parameters​  Name\tTypeCursorType\textends Cursor = Cursor  Returns​  ForwardPaginationArgs&lt;CursorType&gt;  ","version":"Next","tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Class: ForwardPaginationArgs<CursorType>","url":"/typegraphql-relay-connections/docs/api/classes/ForwardPaginationArgs#properties","content":" ","version":"Next","tagName":"h2"},{"title":"after​","type":1,"pageTitle":"Class: ForwardPaginationArgs<CursorType>","url":"/typegraphql-relay-connections/docs/api/classes/ForwardPaginationArgs#after","content":" • Optional after: CursorType  Grabs records starting from after the given cursor.  Defined in​  index.ts:18    ","version":"Next","tagName":"h3"},{"title":"first​","type":1,"pageTitle":"Class: ForwardPaginationArgs<CursorType>","url":"/typegraphql-relay-connections/docs/api/classes/ForwardPaginationArgs#first","content":" • Optional first: number  Grabs the first n records.  Defined in​  index.ts:27 ","version":"Next","tagName":"h3"},{"title":"Class: PageInfo<CursorType>","type":0,"sectionRef":"#","url":"/typegraphql-relay-connections/docs/api/classes/PageInfo","content":"","keywords":"","version":"Next"},{"title":"Type parameters​","type":1,"pageTitle":"Class: PageInfo<CursorType>","url":"/typegraphql-relay-connections/docs/api/classes/PageInfo#type-parameters","content":" Name\tTypeCursorType\textends Cursor = Cursor  ","version":"Next","tagName":"h2"},{"title":"Constructors​","type":1,"pageTitle":"Class: PageInfo<CursorType>","url":"/typegraphql-relay-connections/docs/api/classes/PageInfo#constructors","content":" ","version":"Next","tagName":"h2"},{"title":"constructor​","type":1,"pageTitle":"Class: PageInfo<CursorType>","url":"/typegraphql-relay-connections/docs/api/classes/PageInfo#constructor","content":" • new PageInfo&lt;CursorType&gt;(): PageInfo&lt;CursorType&gt;  Type parameters​  Name\tTypeCursorType\textends Cursor = Cursor  Returns​  PageInfo&lt;CursorType&gt;  ","version":"Next","tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Class: PageInfo<CursorType>","url":"/typegraphql-relay-connections/docs/api/classes/PageInfo#properties","content":" ","version":"Next","tagName":"h2"},{"title":"endCursor​","type":1,"pageTitle":"Class: PageInfo<CursorType>","url":"/typegraphql-relay-connections/docs/api/classes/PageInfo#endcursor","content":" • Optional endCursor: CursorType  The cursor representing the last record from the returned query. Can be used to query before or after this record.  Defined in​  index.ts:144    ","version":"Next","tagName":"h3"},{"title":"hasNextPage​","type":1,"pageTitle":"Class: PageInfo<CursorType>","url":"/typegraphql-relay-connections/docs/api/classes/PageInfo#hasnextpage","content":" • hasNextPage: boolean  Whether the query has more records after the end cursor.  Defined in​  index.ts:114    ","version":"Next","tagName":"h3"},{"title":"hasPreviousPage​","type":1,"pageTitle":"Class: PageInfo<CursorType>","url":"/typegraphql-relay-connections/docs/api/classes/PageInfo#haspreviouspage","content":" • hasPreviousPage: boolean  Whether the query has more records before the start cursor.  Defined in​  index.ts:122    ","version":"Next","tagName":"h3"},{"title":"startCursor​","type":1,"pageTitle":"Class: PageInfo<CursorType>","url":"/typegraphql-relay-connections/docs/api/classes/PageInfo#startcursor","content":" • Optional startCursor: CursorType  The cursor representing the first record from the returned query. Can be used to query before or after this record.  Defined in​  index.ts:134 ","version":"Next","tagName":"h3"},{"title":"Class: RelayConnectionType<CursorType, EdgeType, NodeType>","type":0,"sectionRef":"#","url":"/typegraphql-relay-connections/docs/api/classes/RelayConnectionType","content":"","keywords":"","version":"Next"},{"title":"Type parameters​","type":1,"pageTitle":"Class: RelayConnectionType<CursorType, EdgeType, NodeType>","url":"/typegraphql-relay-connections/docs/api/classes/RelayConnectionType#type-parameters","content":" Name\tTypeCursorType\textends Cursor = Cursor EdgeType\textends RelayEdgeType&lt;CursorType&gt; = RelayEdgeType&lt;CursorType&gt; NodeType\textends NodesType = unknown  ","version":"Next","tagName":"h2"},{"title":"Constructors​","type":1,"pageTitle":"Class: RelayConnectionType<CursorType, EdgeType, NodeType>","url":"/typegraphql-relay-connections/docs/api/classes/RelayConnectionType#constructors","content":" ","version":"Next","tagName":"h2"},{"title":"constructor​","type":1,"pageTitle":"Class: RelayConnectionType<CursorType, EdgeType, NodeType>","url":"/typegraphql-relay-connections/docs/api/classes/RelayConnectionType#constructor","content":" • new RelayConnectionType&lt;CursorType, EdgeType, NodeType&gt;(): RelayConnectionType&lt;CursorType, EdgeType, NodeType&gt;  Type parameters​  Name\tTypeCursorType\textends Cursor = Cursor EdgeType\textends RelayEdgeType&lt;CursorType, unknown, EdgeType&gt; = RelayEdgeType&lt;CursorType, unknown&gt; NodeType\textends unknown = unknown  Returns​  RelayConnectionType&lt;CursorType, EdgeType, NodeType&gt;  ","version":"Next","tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Class: RelayConnectionType<CursorType, EdgeType, NodeType>","url":"/typegraphql-relay-connections/docs/api/classes/RelayConnectionType#properties","content":" ","version":"Next","tagName":"h2"},{"title":"edges​","type":1,"pageTitle":"Class: RelayConnectionType<CursorType, EdgeType, NodeType>","url":"/typegraphql-relay-connections/docs/api/classes/RelayConnectionType#edges","content":" • edges: EdgeType[]  Defined in​  index.ts:236    ","version":"Next","tagName":"h3"},{"title":"nodes​","type":1,"pageTitle":"Class: RelayConnectionType<CursorType, EdgeType, NodeType>","url":"/typegraphql-relay-connections/docs/api/classes/RelayConnectionType#nodes","content":" • nodes: NodeType[]  Defined in​  index.ts:237    ","version":"Next","tagName":"h3"},{"title":"pageInfo​","type":1,"pageTitle":"Class: RelayConnectionType<CursorType, EdgeType, NodeType>","url":"/typegraphql-relay-connections/docs/api/classes/RelayConnectionType#pageinfo","content":" • pageInfo: PageInfo&lt;Cursor&gt;  Defined in​  index.ts:235 ","version":"Next","tagName":"h3"},{"title":"Interface: Cursor","type":0,"sectionRef":"#","url":"/typegraphql-relay-connections/docs/api/interfaces/Cursor","content":"","keywords":"","version":"Next"},{"title":"Indexable​","type":1,"pageTitle":"Interface: Cursor","url":"/typegraphql-relay-connections/docs/api/interfaces/Cursor#indexable","content":" ▪ [K: string]: unknown ","version":"Next","tagName":"h2"},{"title":"Class: FullPaginationArgs<CursorType>","type":0,"sectionRef":"#","url":"/typegraphql-relay-connections/docs/api/classes/FullPaginationArgs","content":"","keywords":"","version":"Next"},{"title":"Type parameters​","type":1,"pageTitle":"Class: FullPaginationArgs<CursorType>","url":"/typegraphql-relay-connections/docs/api/classes/FullPaginationArgs#type-parameters","content":" Name\tTypeCursorType\textends Cursor = Cursor  ","version":"Next","tagName":"h2"},{"title":"Implements​","type":1,"pageTitle":"Class: FullPaginationArgs<CursorType>","url":"/typegraphql-relay-connections/docs/api/classes/FullPaginationArgs#implements","content":" ForwardPaginationArgs&lt;Cursor&gt;BackwardPaginationArgs&lt;Cursor&gt;  ","version":"Next","tagName":"h2"},{"title":"Constructors​","type":1,"pageTitle":"Class: FullPaginationArgs<CursorType>","url":"/typegraphql-relay-connections/docs/api/classes/FullPaginationArgs#constructors","content":" ","version":"Next","tagName":"h2"},{"title":"constructor​","type":1,"pageTitle":"Class: FullPaginationArgs<CursorType>","url":"/typegraphql-relay-connections/docs/api/classes/FullPaginationArgs#constructor","content":" • new FullPaginationArgs&lt;CursorType&gt;(): FullPaginationArgs&lt;CursorType&gt;  Type parameters​  Name\tTypeCursorType\textends Cursor = Cursor  Returns​  FullPaginationArgs&lt;CursorType&gt;  ","version":"Next","tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Class: FullPaginationArgs<CursorType>","url":"/typegraphql-relay-connections/docs/api/classes/FullPaginationArgs#properties","content":" ","version":"Next","tagName":"h2"},{"title":"after​","type":1,"pageTitle":"Class: FullPaginationArgs<CursorType>","url":"/typegraphql-relay-connections/docs/api/classes/FullPaginationArgs#after","content":" • Optional after: CursorType  Grabs records starting from after the given cursor.  Implementation of​  ForwardPaginationArgs.after  Defined in​  index.ts:83    ","version":"Next","tagName":"h3"},{"title":"before​","type":1,"pageTitle":"Class: FullPaginationArgs<CursorType>","url":"/typegraphql-relay-connections/docs/api/classes/FullPaginationArgs#before","content":" • Optional before: CursorType  Grabs records ending before the given cursor.  Implementation of​  BackwardPaginationArgs.before  Defined in​  index.ts:65    ","version":"Next","tagName":"h3"},{"title":"first​","type":1,"pageTitle":"Class: FullPaginationArgs<CursorType>","url":"/typegraphql-relay-connections/docs/api/classes/FullPaginationArgs#first","content":" • Optional first: number  Grabs the first n records.  Implementation of​  ForwardPaginationArgs.first  Defined in​  index.ts:92    ","version":"Next","tagName":"h3"},{"title":"last​","type":1,"pageTitle":"Class: FullPaginationArgs<CursorType>","url":"/typegraphql-relay-connections/docs/api/classes/FullPaginationArgs#last","content":" • Optional last: number  Grabs the last n records.  Implementation of​  BackwardPaginationArgs.last  Defined in​  index.ts:74 ","version":"Next","tagName":"h3"},{"title":"Changelog","type":0,"sectionRef":"#","url":"/typegraphql-relay-connections/docs/Changelog","content":"","keywords":"","version":"Next"},{"title":"Class: RelayEdgeType<CursorType, NodeType>","type":0,"sectionRef":"#","url":"/typegraphql-relay-connections/docs/api/classes/RelayEdgeType","content":"","keywords":"","version":"Next"},{"title":"Type parameters​","type":1,"pageTitle":"Class: RelayEdgeType<CursorType, NodeType>","url":"/typegraphql-relay-connections/docs/api/classes/RelayEdgeType#type-parameters","content":" Name\tTypeCursorType\textends Cursor = Cursor NodeType\textends NodesType = unknown  ","version":"Next","tagName":"h2"},{"title":"Constructors​","type":1,"pageTitle":"Class: RelayEdgeType<CursorType, NodeType>","url":"/typegraphql-relay-connections/docs/api/classes/RelayEdgeType#constructors","content":" ","version":"Next","tagName":"h2"},{"title":"constructor​","type":1,"pageTitle":"Class: RelayEdgeType<CursorType, NodeType>","url":"/typegraphql-relay-connections/docs/api/classes/RelayEdgeType#constructor","content":" • new RelayEdgeType&lt;CursorType, NodeType&gt;(): RelayEdgeType&lt;CursorType, NodeType&gt;  Type parameters​  Name\tTypeCursorType\textends Cursor = Cursor NodeType\textends unknown = unknown  Returns​  RelayEdgeType&lt;CursorType, NodeType&gt;  ","version":"Next","tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Class: RelayEdgeType<CursorType, NodeType>","url":"/typegraphql-relay-connections/docs/api/classes/RelayEdgeType#properties","content":" ","version":"Next","tagName":"h2"},{"title":"cursor​","type":1,"pageTitle":"Class: RelayEdgeType<CursorType, NodeType>","url":"/typegraphql-relay-connections/docs/api/classes/RelayEdgeType#cursor","content":" • cursor: CursorType  Defined in​  index.ts:158    ","version":"Next","tagName":"h3"},{"title":"node​","type":1,"pageTitle":"Class: RelayEdgeType<CursorType, NodeType>","url":"/typegraphql-relay-connections/docs/api/classes/RelayEdgeType#node","content":" • node: NodeType  Defined in​  index.ts:159 ","version":"Next","tagName":"h3"},{"title":"Version 1.x to 2.x​","type":1,"pageTitle":"Changelog","url":"/typegraphql-relay-connections/docs/Changelog#version-1x-to-2x","content":" Removed the count property from PageInfo as it is not part of the spec. ","version":"Next","tagName":"h2"},{"title":"Extending the Builtin Cursor 📄","type":0,"sectionRef":"#","url":"/typegraphql-relay-connections/docs/tutorials/custom-cursors","content":"Extending the Builtin Cursor 📄 The default Cursor type allows any object value, but you may instead want to extend it with more properties and values which will allow autocomplete of those propety value pairs. You could do that like so: declare module &quot;typegraphql-relay-connections&quot; { interface Cursor { // Your additional property value pairs. id: string; } } ","keywords":"","version":"Next"},{"title":"ConnectionType 🦔","type":0,"sectionRef":"#","url":"/typegraphql-relay-connections/docs/usage/connection-type","content":"ConnectionType 🦔 The ConnectionType function is the slightly more complicated of the two main functions. We'll define a full example below, but if we isolate the ConnectionType by itself you'll see it looks like this: @ObjectType() export class SongConnection extends ConnectionType({ node: Song, edge: SongEdge }) { // You can add additional Types to your ConnectionType that are specific to it here: } To have a more complete example all you need to do is create a ObjectType class, EdgeType class, and then plug them in to the ConnectionType class: import {ObjectType, Field} from &quot;type-graphql&quot;; import {EdgeType, ConnectionType} from &quot;typegraphql-relay-connections&quot;; // This is our ObjectType: @ObjectType() class Song { @Field() id!: string @Field() title!: string; } // This is the EdgeType: @ObjectType() export class SongEdge extends EdgeType(Song) {} // This is the ConnectionType: @ObjectType() export class SongConnection extends ConnectionType({ node: Song, edge: SongEdge }) {} ","keywords":"","version":"Next"},{"title":"EdgeType 🧀","type":0,"sectionRef":"#","url":"/typegraphql-relay-connections/docs/usage/edge-type","content":"EdgeType 🧀 The EdgeType allows you to create a GraphQL relay edge ObjectType from a base type. ObjectTypes are what you can return from any graphql resolver, see the examples for more full implementations of how to connect to resolvers. We'll get to a more full and complete example of EdgeTypes below, but for now here is an isolated example showing how exactly the EdgeType is used. @ObjectType() export class SongEdge extends EdgeType(Song) { // You can add additional properties and values that are specific to your specific EdgeType here... } For a more full example, all you need to do is create a base ObjectType Class to pass into the EdgeType function: import {ObjectType, Field} from &quot;type-graphql&quot;; import {EdgeType} from &quot;typegraphql-relay-connections&quot;; // This is our ObjectType: @ObjectType() class Song { @Field() id!: string @Field() title!: string; } // This is the EdgeType: @ObjectType() export class SongEdge extends EdgeType(Song) {} ","keywords":"","version":"Next"},{"title":"Class: BackwardPaginationArgs<CursorType>","type":0,"sectionRef":"#","url":"/typegraphql-relay-connections/docs/api/classes/BackwardPaginationArgs","content":"","keywords":"","version":"Next"},{"title":"Type parameters​","type":1,"pageTitle":"Class: BackwardPaginationArgs<CursorType>","url":"/typegraphql-relay-connections/docs/api/classes/BackwardPaginationArgs#type-parameters","content":" Name\tTypeCursorType\textends Cursor = Cursor  ","version":"Next","tagName":"h2"},{"title":"Implemented by​","type":1,"pageTitle":"Class: BackwardPaginationArgs<CursorType>","url":"/typegraphql-relay-connections/docs/api/classes/BackwardPaginationArgs#implemented-by","content":" FullPaginationArgs  ","version":"Next","tagName":"h2"},{"title":"Constructors​","type":1,"pageTitle":"Class: BackwardPaginationArgs<CursorType>","url":"/typegraphql-relay-connections/docs/api/classes/BackwardPaginationArgs#constructors","content":" ","version":"Next","tagName":"h2"},{"title":"constructor​","type":1,"pageTitle":"Class: BackwardPaginationArgs<CursorType>","url":"/typegraphql-relay-connections/docs/api/classes/BackwardPaginationArgs#constructor","content":" • new BackwardPaginationArgs&lt;CursorType&gt;(): BackwardPaginationArgs&lt;CursorType&gt;  Type parameters​  Name\tTypeCursorType\textends Cursor = Cursor  Returns​  BackwardPaginationArgs&lt;CursorType&gt;  ","version":"Next","tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Class: BackwardPaginationArgs<CursorType>","url":"/typegraphql-relay-connections/docs/api/classes/BackwardPaginationArgs#properties","content":" ","version":"Next","tagName":"h2"},{"title":"before​","type":1,"pageTitle":"Class: BackwardPaginationArgs<CursorType>","url":"/typegraphql-relay-connections/docs/api/classes/BackwardPaginationArgs#before","content":" • Optional before: CursorType  Grabs records ending before the given cursor.  Defined in​  index.ts:42    ","version":"Next","tagName":"h3"},{"title":"last​","type":1,"pageTitle":"Class: BackwardPaginationArgs<CursorType>","url":"/typegraphql-relay-connections/docs/api/classes/BackwardPaginationArgs#last","content":" • Optional last: number  Grabs the last n records.  Defined in​  index.ts:51 ","version":"Next","tagName":"h3"},{"title":"typegraphql-relay-connections","type":0,"sectionRef":"#","url":"/typegraphql-relay-connections/docs/api/modules","content":"","keywords":"","version":"Next"},{"title":"Classes​","type":1,"pageTitle":"typegraphql-relay-connections","url":"/typegraphql-relay-connections/docs/api/modules#classes","content":" BackwardPaginationArgsForwardPaginationArgsFullPaginationArgsPageInfoRelayConnectionTypeRelayEdgeType  ","version":"Next","tagName":"h2"},{"title":"Interfaces​","type":1,"pageTitle":"typegraphql-relay-connections","url":"/typegraphql-relay-connections/docs/api/modules#interfaces","content":" Cursor  ","version":"Next","tagName":"h2"},{"title":"References​","type":1,"pageTitle":"typegraphql-relay-connections","url":"/typegraphql-relay-connections/docs/api/modules#references","content":" ","version":"Next","tagName":"h2"},{"title":"CursorScalar​","type":1,"pageTitle":"typegraphql-relay-connections","url":"/typegraphql-relay-connections/docs/api/modules#cursorscalar","content":" Renames and re-exports Cursor  ","version":"Next","tagName":"h3"},{"title":"Type Aliases​","type":1,"pageTitle":"typegraphql-relay-connections","url":"/typegraphql-relay-connections/docs/api/modules#type-aliases","content":" ","version":"Next","tagName":"h2"},{"title":"ClassReturnType​","type":1,"pageTitle":"typegraphql-relay-connections","url":"/typegraphql-relay-connections/docs/api/modules#classreturntype","content":" Ƭ ClassReturnType&lt;T&gt;: T extends ClassType&lt;infer J&gt; ? J : never  Type parameters​  Name\tTypeT\textends ClassType&lt;unknown&gt;  Defined in​  index.ts:149    ","version":"Next","tagName":"h3"},{"title":"NodesType​","type":1,"pageTitle":"typegraphql-relay-connections","url":"/typegraphql-relay-connections/docs/api/modules#nodestype","content":" Ƭ NodesType: unknown  Defined in​  index.ts:147    ","version":"Next","tagName":"h3"},{"title":"NodesTypeClass​","type":1,"pageTitle":"typegraphql-relay-connections","url":"/typegraphql-relay-connections/docs/api/modules#nodestypeclass","content":" Ƭ NodesTypeClass: ClassType&lt;NodesType&gt;  Defined in​  index.ts:148  ","version":"Next","tagName":"h3"},{"title":"Variables​","type":1,"pageTitle":"typegraphql-relay-connections","url":"/typegraphql-relay-connections/docs/api/modules#variables","content":" ","version":"Next","tagName":"h2"},{"title":"Cursor​","type":1,"pageTitle":"typegraphql-relay-connections","url":"/typegraphql-relay-connections/docs/api/modules#cursor","content":" • Cursor: GraphQLScalarType  Defined in​  cursor.ts:40  cursor.ts:107  ","version":"Next","tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"typegraphql-relay-connections","url":"/typegraphql-relay-connections/docs/api/modules#functions","content":" ","version":"Next","tagName":"h2"},{"title":"ConnectionType​","type":1,"pageTitle":"typegraphql-relay-connections","url":"/typegraphql-relay-connections/docs/api/modules#connectiontype","content":" ▸ ConnectionType&lt;CursorType, EdgeType, NodeType&gt;(«destructured»): ClassType&lt;RelayConnectionType&lt;CursorType, EdgeType, NodeType&gt;&gt;  Setup an extensible ConnectionType  Type parameters​  Name\tTypeCursorType\textends Cursor = Cursor EdgeType\textends RelayEdgeType&lt;CursorType, unknown, EdgeType&gt; = RelayEdgeType&lt;CursorType, unknown&gt; NodeType\textends unknown = unknown  Parameters​  Name\tType«destructured»\tObject › edge\tClassType&lt;EdgeType&gt; | HasConstructor&lt;EdgeType&gt; › node\tClassType&lt;NodeType&gt; | HasConstructor&lt;NodeType&gt;  Returns​  ClassType&lt;RelayConnectionType&lt;CursorType, EdgeType, NodeType&gt;&gt;  A graphql object type that represents fields that can be queried.  Example  Usage:  @ObjectType() class Item { @Field() id!: number; } @ObjectType() export class ItemEdge extends EdgeType(Item) {} // You must create an edge type first @ObjectType() export class ItemConnection extends ConnectionType({ edge: ItemEdge, node: Item, }) {}   Defined in​  index.ts:267    ","version":"Next","tagName":"h3"},{"title":"EdgeType​","type":1,"pageTitle":"typegraphql-relay-connections","url":"/typegraphql-relay-connections/docs/api/modules#edgetype","content":" ▸ EdgeType&lt;CursorType, NodeType&gt;(nodeType): ClassType&lt;RelayEdgeType&lt;CursorType, NodeType&gt;&gt;  Setup a extensible EdgeType  Type parameters​  Name\tTypeCursorType\textends Cursor = Cursor NodeType\textends unknown = unknown  Parameters​  Name\tTypenodeType\tClassType&lt;NodeType&gt; | HasConstructor&lt;NodeType&gt;  Returns​  ClassType&lt;RelayEdgeType&lt;CursorType, NodeType&gt;&gt;  A graphql object type that represents fields that can be queried.  Example  Usage:  // create an object type @ObjectType() class Item { @Field() id!: number; } // Create your extensible Edge type @ObjectType() export class ItemEdge extends EdgeType(Item) { // add additional properties here @Field(() =&gt; Date) createdAt: Date }   Defined in​  index.ts:188    ","version":"Next","tagName":"h3"},{"title":"deserializeCursor​","type":1,"pageTitle":"typegraphql-relay-connections","url":"/typegraphql-relay-connections/docs/api/modules#deserializecursor","content":" ▸ deserializeCursor(externalCursor): Cursor  The external cursor is the value the cursor will be after it comes from the graphql client.  Parameters​  Name\tType\tDescriptionexternalCursor\tstring\tThe serialized cursor that most that was just received from the client.  Returns​  Cursor  The full deserialized, decoded, and parsed cursor.  Defined in​  cursor.ts:60    ","version":"Next","tagName":"h3"},{"title":"serializeCursor​","type":1,"pageTitle":"typegraphql-relay-connections","url":"/typegraphql-relay-connections/docs/api/modules#serializecursor","content":" ▸ serializeCursor(internalCursor): string  The serialized cursor is the value the cursor will be so it may arrive at the graphql client and be sent through a network. In this case the type is an opaque base64 string.  Parameters​  Name\tType\tDescriptioninternalCursor\tCursor\tThe full unencoded and parsed cursor.  Returns​  string  The encoded cursor ready to be sent to the client.  Defined in​  cursor.ts:50 ","version":"Next","tagName":"h3"},{"title":"Intro 🚀","type":0,"sectionRef":"#","url":"/typegraphql-relay-connections/docs/intro","content":"","keywords":"","version":"Next"},{"title":"Show Me Da Codez!! 💻​","type":1,"pageTitle":"Intro 🚀","url":"/typegraphql-relay-connections/docs/intro#show-me-da-codez-","content":" The quickest possible example to show what this library does is the following. We create two GraphQL ObjectTypes using TypeGraphQL object types.  import { Field, ObjectType, } from &quot;type-graphql&quot;; import { ConnectionType, EdgeType } from &quot;typegraphql-relay-connections&quot;; @ObjectType() class Song { @Field() id!: string @Field() title!: string; } @ObjectType() export class SongEdge extends EdgeType(Song) {} @ObjectType() export class SongConnection extends ConnectionType({ edge: SongEdge, node: Song, }) {}   The last thing we can do with this library is extend the built in Cursor like so:  declare module &quot;typegraphql-relay-connections&quot; { interface Cursor { id: string; } }   ","version":"Next","tagName":"h2"},{"title":"Peer Dependencies 🔗​","type":1,"pageTitle":"Intro 🚀","url":"/typegraphql-relay-connections/docs/intro#peer-dependencies-","content":" All our peer dependencies are due to TypeGraphQL. Follow the setup section for TypeGraphQL.  yarn add graphql@15 reflect-metadata type-graphql   ","version":"Next","tagName":"h2"},{"title":"Background on TypeGraphQL 😎​","type":1,"pageTitle":"Intro 🚀","url":"/typegraphql-relay-connections/docs/intro#background-on-typegraphql-","content":" The idea behind TypeGraphQL is you define your GraphQL types using TypeScript. TypeGraphQL follows a code first approach rather than the schema first approach. Since TypeGraphQL's code first approach is written in TypeScript this allows you to strongly type your GraphQL server.  ","version":"Next","tagName":"h2"},{"title":"Introductory Example 🤓​","type":1,"pageTitle":"Intro 🚀","url":"/typegraphql-relay-connections/docs/intro#introductory-example-","content":" See this intro example on codesandbox  We'll start with some imports for this (you can replace apollo-server with the graphql server you choose to use.):  import &quot;reflect-metadata&quot;; import { ApolloServer } from &quot;apollo-server&quot;; import { Field, ObjectType, Args, Query, Resolver, buildSchema } from &quot;type-graphql&quot;; import { ForwardPaginationArgs, ConnectionType, EdgeType, BackwardPaginationArgs } from &quot;typegraphql-relay-connections&quot;; // you'll have to make this yourself for an example see the codesandbox import * as controller from &quot;./song.controller&quot;;   First create an object-type through type-graphql  @ObjectType() class Song { @Field() id!: string @Field() title!: string; }   That last part was just TypeGraphQL, but next is where this library comes in. It helps you create the Edge and Connection ObjectTypes as well as a custom cursor. Both the EdgeType and ConnectionType functions come from this library.  @ObjectType() export class SongEdge extends EdgeType(Song) {} @ObjectType() export class SongConnection extends ConnectionType({ edge: SongEdge, node: Song, }) {} declare module &quot;typegraphql-relay-connections&quot; { interface Cursor { id: string; } }   The Rest is just more TypeGraphQL.  @Resolver(Song) export class SongResolver { @Query(() =&gt; SongConnection) async songs( @Args() forwardPaging: ForwardPaginationArgs&lt;Cursor&gt;, @Args() backwardPaging: BackwardPaginationArgs&lt;Cursor&gt; ): Promise&lt;SongConnection&gt; { // implementation up to you! return controller.getSongs({forwardPaging, backwardPaging}); } } const PORT = 4000; async function bootstrap() { const schema = await buildSchema({ resolvers: [SongResolver] }); // Create the GraphQL server const server = new ApolloServer({ schema }); // Start the server const { url } = await server.listen(PORT); console.log(`Server is running, GraphQL Playground available at ${url}`); } bootstrap();   ","version":"Next","tagName":"h2"},{"title":"Using mongoose?​","type":1,"pageTitle":"Intro 🚀","url":"/typegraphql-relay-connections/docs/intro#using-mongoose","content":" There is a companion library available called mongoose-relay-paginate! It works great with this library. ","version":"Next","tagName":"h2"},{"title":"TypeGraphQL Example 🏋️‍♂️","type":0,"sectionRef":"#","url":"/typegraphql-relay-connections/docs/examples/typegraphql","content":"TypeGraphQL Example 🏋️‍♂️ See the tests and the example folder for more examples. Here's a full-fledged typegraphql server example (codesandbox link): import &quot;reflect-metadata&quot;; import { ApolloServer } from &quot;apollo-server&quot;; import { ObjectType, Field, Resolver, Query, Mutation, Arg, InputType, buildSchema, Args } from &quot;type-graphql&quot;; import { EdgeType, ConnectionType, BackwardPaginationArgs, ForwardPaginationArgs } from &quot;typegraphql-relay-connections&quot;; import { edgesToReturn } from &quot;./pagination.example&quot;; // Setup GraphQL Schema @ObjectType() class Book { @Field() title!: string; @Field() author!: string; } @InputType() class NewBookInput { @Field() title!: string; @Field() author!: string; } // setup relay connection types @ObjectType() class BookEdge extends EdgeType(Book) {} @ObjectType() class BookConnection extends ConnectionType({ edge: BookEdge, node: Book }) {} declare module &quot;typegraphql-relay-connections&quot; { interface Cursor { id: string; } } // usually you have some form of database this will do okay for an example const books: Book[] = [ { title: &quot;Three Little Pigs&quot;, author: &quot;Joseph Jacobs&quot; }, { title: &quot;A Christmas Carol&quot;, author: &quot;Charles Dickens&quot; } ]; // Setup resolver @Resolver(Book) class BookResolver { @Query((returns) =&gt; BookConnection) async searchBooksByTitle( @Args() backwardPaging: BackwardPaginationArgs, @Args() forwardPaging: ForwardPaginationArgs, @Arg(&quot;title&quot;) title: string ): Promise&lt;BookConnection&gt; { const edges = edgesToReturn( books .filter((book) =&gt; book.title.includes(title)) .map((node) =&gt; ({ node, cursor: { id: node.title } })), {} ); return { edges, nodes: edges.map((x) =&gt; x.node), pageInfo: { hasNextPage: false, hasPreviousPage: false, endCursor: edges[edges.length - 1].cursor, startCursor: edges[0].cursor, } }; } @Query((returns) =&gt; BookConnection) async searchBooksByAuthor( @Arg(&quot;author&quot;) title: string ): Promise&lt;BookConnection&gt; { const edges = edgesToReturn( books .filter((book) =&gt; book.author.includes(title)) .map((node) =&gt; ({ node, cursor: { id: node.title } })), {} ); return { edges, nodes: edges.map((x) =&gt; x.node), pageInfo: { hasNextPage: false, hasPreviousPage: false, endCursor: edges[edges.length - 1].cursor, startCursor: edges[0].cursor, } }; } @Query((returns) =&gt; BookConnection) async allBooks(): Promise&lt;BookConnection&gt; { const edges = edgesToReturn( books.map((node) =&gt; ({ node, cursor: { id: node.title } })), {} ); return { edges, nodes: edges.map((x) =&gt; x.node), pageInfo: { hasNextPage: false, hasPreviousPage: false, endCursor: edges[edges.length - 1].cursor, startCursor: edges[0].cursor, } }; } @Mutation((returns) =&gt; Book) async addBook(@Arg(&quot;newBookData&quot;) newBookData: NewBookInput) { books.push(newBookData); return newBookData; } } const PORT = 4000; async function bootstrap() { const schema = await buildSchema({ resolvers: [BookResolver] }); // Create the GraphQL server const server = new ApolloServer({ schema }); // Start the server const { url } = await server.listen(PORT); console.log(`Server is running, GraphQL Playground available at ${url}`); } bootstrap(); ","keywords":"","version":"Next"},{"title":"typegraphql-relay-connections","type":0,"sectionRef":"#","url":"/typegraphql-relay-connections/docs/api","content":"","keywords":"","version":"Next"},{"title":"Using mongoose?​","type":1,"pageTitle":"typegraphql-relay-connections","url":"/typegraphql-relay-connections/docs/api#using-mongoose","content":" There is a companion library available called mongoose-relay-paginate! It works great with this library.  ","version":"Next","tagName":"h2"},{"title":"Documentation​","type":1,"pageTitle":"typegraphql-relay-connections","url":"/typegraphql-relay-connections/docs/api#documentation","content":" For more details than below view the Docs.  ","version":"Next","tagName":"h2"},{"title":"Tutorial​","type":1,"pageTitle":"typegraphql-relay-connections","url":"/typegraphql-relay-connections/docs/api#tutorial","content":" First create an object-type through type-graphql  @ObjectType() class Item { @Field() id!: number; }   Then add this libraries Edge and Connection types to it:  @ObjectType() export class ItemEdge extends EdgeType(Item) {} @ObjectType() export class ItemConnection extends ConnectionType({ edge: ItemEdge, node: Item, }) {} @InputType() class MyProjectsCursor implements Cursor { @Field() _id!: number; [key: string]: unknown; }   ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"typegraphql-relay-connections","url":"/typegraphql-relay-connections/docs/api#example","content":" See the tests and the example folder for more examples.  Here's a (possibly, at some point, out of date) version of the example:  import &quot;reflect-metadata&quot;; import { execute } from &quot;graphql&quot;; import gql from &quot;graphql-tag&quot;; import { Args, buildSchema, Field, InputType, ObjectType, Query, Resolver, } from &quot;type-graphql&quot;; import Cursor, { ForwardPaginationArgs, ConnectionType, EdgeType, BackwardPaginationArgs, serializeCursor } from &quot;typegraphql-relay-connections&quot;; @ObjectType() class Item { @Field() id!: number; } @ObjectType() export class ItemEdge extends EdgeType(Item) {} @ObjectType() export class ItemConnection extends ConnectionType({ edge: ItemEdge, node: Item, }) {} @InputType() class MyProjectsCursor implements Cursor { @Field() _id!: number; [key: string]: unknown; } export const items = [ { id: 1, }, { id: 2, }, { id: 3, }, { id: 4, }, ]; @Resolver(Item) export class ItemResolver { @Query(() =&gt; ItemConnection) Items( @Args() forwardPaging: ForwardPaginationArgs, @Args() backwardPaging: BackwardPaginationArgs ): ItemConnection { return { edges: items.map((node) =&gt; ({ /** You can pick off whatever properties fit your cursor or repeat the whole node */ cursor: { id: node.id }, node, })), nodes: items, pageInfo: { hasNextPage: false, hasPreviousPage: false, endCursor: items[items.length - 1], startCursor: items[0], }, }; } } (async () =&gt; { const schema = await buildSchema({ resolvers: [ItemResolver], }); const result = execute({ schema, document: gql` #graphql query ($cursor: Cursor!) { Items { edges { cursor node { id } } nodes { id } pageInfo { hasNextPage hasPreviousPage endCursor startCursor } } } `, variableValues: { cursor: serializeCursor({ id: 2, }), }, }); console.log(JSON.stringify(await result, null, 2)); })();  ","version":"Next","tagName":"h3"}],"options":{"id":"default"}}