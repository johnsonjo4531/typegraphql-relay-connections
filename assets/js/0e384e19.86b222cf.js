"use strict";(self.webpackChunktypegraphql_relay_connections_docs=self.webpackChunktypegraphql_relay_connections_docs||[]).push([[9671],{7876:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=o(5893),t=o(1151);const a={sidebar_position:1},s="Intro \ud83d\ude80",i={id:"intro",title:"Intro \ud83d\ude80",description:"This library provides a way to setup typings for TypeGraphQL with Relay Connection Types. Relay Connection Types are a great way to define pagination in an app. This libraries connection types follow the Relay Connection Type Server Standard. You may want to read up on relay if you're confused on what the benefits of relay connections to find out how exactly this library works. Particularly this library implements the second part of the standard, so it accomplishes: 2.) A description of how to page through connections, so you may want to check out the relevant section on connections in the relay GraphQL server standard.",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/typegraphql-relay-connections/docs/intro",draft:!1,unlisted:!1,editUrl:"https://github.com/johnsonjo4531/typegraphql-relay-connections/docs/blog/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Cursor",permalink:"/typegraphql-relay-connections/docs/api/interfaces/Cursor"},next:{title:"EdgeType \ud83e\uddc0",permalink:"/typegraphql-relay-connections/docs/usage/edge-type"}},c={},l=[{value:"Show Me Da Codez!! \ud83d\udcbb",id:"show-me-da-codez-",level:2},{value:"Peer Dependencies \ud83d\udd17",id:"peer-dependencies-",level:2},{value:"Background on TypeGraphQL \ud83d\ude0e",id:"background-on-typegraphql-",level:2},{value:"Introductory Example \ud83e\udd13",id:"introductory-example-",level:2},{value:"Using mongoose?",id:"using-mongoose",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"intro-",children:"Intro \ud83d\ude80"}),"\n",(0,r.jsxs)(n.p,{children:["This library provides a way to setup typings for ",(0,r.jsx)(n.a,{href:"https://typegraphql.com/",children:"TypeGraphQL"})," with Relay Connection Types. Relay Connection Types are a great way to define pagination in an app. This libraries connection types follow the ",(0,r.jsx)(n.a,{href:"https://relay.dev/docs/guides/graphql-server-specification/",children:"Relay Connection Type Server Standard"}),". You may want to read up on relay if you're confused on what the benefits of relay connections to find out how exactly this library works. Particularly this library implements the second part of the standard, so it accomplishes: 2.) A description of how to page through connections, so you may want to check out the ",(0,r.jsx)(n.a,{href:"https://relay.dev/docs/guides/graphql-server-specification/#connections",children:"relevant section on connections in the relay GraphQL server standard"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Note that though pagination types and utils are in this repo, the implementation of the paging algorithms are up to the user this is on purpose and is meant to keep this library small and maintanable."}),"\n",(0,r.jsx)(n.h2,{id:"show-me-da-codez-",children:"Show Me Da Codez!! \ud83d\udcbb"}),"\n",(0,r.jsx)(n.p,{children:"The quickest possible example to show what this library does is the following. We create two GraphQL ObjectTypes using TypeGraphQL object types."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import {\n  Field,\n  ObjectType,\n} from "type-graphql";\nimport {\n  ConnectionType,\n  EdgeType\n} from "typegraphql-relay-connections";\n\n@ObjectType()\nclass Song {\n  @Field()\n  id!: string\n\n  @Field()\n  title!: string;\n}\n\n@ObjectType()\nexport class SongEdge extends EdgeType(Song) {}\n\n@ObjectType()\nexport class SongConnection extends ConnectionType(SongEdge) {}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The last thing we can do with this library is ",(0,r.jsx)(n.a,{href:"./tutorials/custom-cursors",children:"extend the built in Cursor"})," like so:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'declare module "typegraphql-relay-connections" {\n  interface Cursor {\n    id: string;\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"peer-dependencies-",children:"Peer Dependencies \ud83d\udd17"}),"\n",(0,r.jsxs)(n.p,{children:["All our peer dependencies are due to TypeGraphQL. Follow the setup section for ",(0,r.jsx)(n.a,{href:"https://typegraphql.com/",children:"TypeGraphQL"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"yarn add graphql@15 reflect-metadata type-graphql\n"})}),"\n",(0,r.jsx)(n.h2,{id:"background-on-typegraphql-",children:"Background on TypeGraphQL \ud83d\ude0e"}),"\n",(0,r.jsx)(n.p,{children:"The idea behind TypeGraphQL is you define your GraphQL types using TypeScript. TypeGraphQL follows a code first approach rather than the schema first approach. Since TypeGraphQL's code first approach is written in TypeScript this allows you to strongly type your GraphQL server."}),"\n",(0,r.jsx)(n.h2,{id:"introductory-example-",children:"Introductory Example \ud83e\udd13"}),"\n",(0,r.jsxs)(n.p,{children:["See this intro example ",(0,r.jsx)(n.a,{href:"https://codesandbox.io/s/typegraphql-relay-connections-intro-example-66ec9o",children:"on codesandbox"})]}),"\n",(0,r.jsx)(n.p,{children:"We'll start with some imports for this (you can replace apollo-server with the graphql server you choose to use.):"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import "reflect-metadata";\nimport { ApolloServer } from "apollo-server";\nimport {\n  Field,\n  ObjectType,\n  Args,\n  Query,\n  Resolver,\n  buildSchema\n} from "type-graphql";\nimport {\n  ForwardPaginationArgs,\n  ConnectionType,\n  EdgeType,\n  BackwardPaginationArgs\n} from "typegraphql-relay-connections";\n// you\'ll have to make this yourself for an example see the codesandbox\nimport * as controller from "./song.controller";\n'})}),"\n",(0,r.jsxs)(n.p,{children:["First create an object-type through ",(0,r.jsx)(n.a,{href:"https://typegraphql.com/",children:"type-graphql"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"@ObjectType()\nclass Song {\n  @Field()\n  id!: string\n\n  @Field()\n  title!: string;\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["That last part was just TypeGraphQL, but next is where this library comes in. It helps you create the Edge and Connection ObjectTypes as well as a custom cursor. Both the ",(0,r.jsx)(n.code,{children:"EdgeType"})," and ",(0,r.jsx)(n.code,{children:"ConnectionType"})," functions come from this library."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'@ObjectType()\nexport class SongEdge extends EdgeType(Song) {}\n\n@ObjectType()\nexport class SongConnection extends ConnectionType(SongEdge) {}\n\n\ndeclare module "typegraphql-relay-connections" {\n  interface Cursor {\n    id: string;\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"The Rest is just more TypeGraphQL."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"@Resolver(Song)\nexport class SongResolver {\n  @Query(() => SongConnection)\n  async songs(\n    @Args() forwardPaging: ForwardPaginationArgs<Cursor>,\n    @Args() backwardPaging: BackwardPaginationArgs<Cursor>\n  ): Promise<SongConnection> {\n    // implementation up to you!\n    return controller.getSongs({forwardPaging, backwardPaging});\n  }\n}\n\nconst PORT = 4000;\n\nasync function bootstrap() {\n  const schema = await buildSchema({\n    resolvers: [SongResolver]\n  });\n\n  // Create the GraphQL server\n  const server = new ApolloServer({\n    schema\n  });\n\n  // Start the server\n  const { url } = await server.listen(PORT);\n  console.log(`Server is running, GraphQL Playground available at ${url}`);\n}\n\nbootstrap();\n"})}),"\n",(0,r.jsx)(n.h2,{id:"using-mongoose",children:"Using mongoose?"}),"\n",(0,r.jsxs)(n.p,{children:["There is a companion library available called ",(0,r.jsx)(n.a,{href:"https://www.npmjs.com/package/mongoose-relay-paginate",children:"mongoose-relay-paginate"}),"! It works great with this library."]})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},1151:(e,n,o)=>{o.d(n,{Z:()=>i,a:()=>s});var r=o(7294);const t={},a=r.createContext(t);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);