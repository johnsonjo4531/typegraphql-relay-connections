"use strict";(self.webpackChunktypegraphql_relay_connections_docs=self.webpackChunktypegraphql_relay_connections_docs||[]).push([[2187],{4053:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>c,toc:()=>p});var o=n(5893),s=n(1151);const r={sidebar_position:1},a="EdgeType \ud83e\uddc0",c={id:"usage/edge-type",title:"EdgeType \ud83e\uddc0",description:"The EdgeType allows you to create a GraphQL relay edge ObjectType from a base type. ObjectTypes are what you can return from any graphql resolver, see the examples for more full implementations of how to connect to resolvers. We'll get to a more full and complete example of EdgeTypes below, but for now here is an isolated example showing how exactly the EdgeType is used.",source:"@site/docs/usage/edge-type.md",sourceDirName:"usage",slug:"/usage/edge-type",permalink:"/typegraphql-relay-connections/docs/usage/edge-type",draft:!1,unlisted:!1,editUrl:"https://github.com/johnsonjo4531/typegraphql-relay-connections/docs/blog/docs/usage/edge-type.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Intro \ud83d\ude80",permalink:"/typegraphql-relay-connections/docs/intro"},next:{title:"ConnectionType \ud83e\udd94",permalink:"/typegraphql-relay-connections/docs/usage/connection-type"}},l={},p=[];function i(e){const t={code:"code",h1:"h1",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"edgetype-",children:"EdgeType \ud83e\uddc0"}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"EdgeType"})," allows you to create a GraphQL relay edge ObjectType from a base type. ObjectTypes are what you can return from any graphql resolver, see the examples for more full implementations of how to connect to resolvers. We'll get to a more full and complete example of ",(0,o.jsx)(t.code,{children:"EdgeType"}),"s below, but for now here is an isolated example showing how exactly the ",(0,o.jsx)(t.code,{children:"EdgeType"})," is used."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"@ObjectType()\nexport class SongEdge extends EdgeType(Song) {\n  // You can add additional properties and values that are specific to your specific EdgeType here...\n}\n"})}),"\n",(0,o.jsx)(t.p,{children:"For a more full example, all you need to do is create a base ObjectType Class to pass into the EdgeType function:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:'import {ObjectType, Field} from "type-graphql";\nimport {EdgeType} from "typegraphql-relay-connections";\n\n// This is our ObjectType:\n@ObjectType()\nclass Song {\n  @Field()\n  id!: string\n\n  @Field()\n  title!: string;\n}\n\n// This is the EdgeType:\n@ObjectType()\nexport class SongEdge extends EdgeType(Song) {}\n'})})]})}function d(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(i,{...e})}):i(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>c,a:()=>a});var o=n(7294);const s={},r=o.createContext(s);function a(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);