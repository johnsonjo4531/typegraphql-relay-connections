"use strict";(self.webpackChunktypegraphql_relay_connections_docs=self.webpackChunktypegraphql_relay_connections_docs||[]).push([[53],{1109:function(e){e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Intro \ud83d\ude80","href":"/typegraphql-relay-connections/docs/intro","docId":"intro"},{"type":"category","label":"API","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"EdgeType \ud83e\uddc0","href":"/typegraphql-relay-connections/docs/api/edge-type","docId":"api/edge-type"},{"type":"link","label":"ConnectionType \ud83e\udd94","href":"/typegraphql-relay-connections/docs/api/connection-type","docId":"api/connection-type"}]},{"type":"category","label":"Tutorials","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Extending the Builtin Cursor \ud83d\udcc4","href":"/typegraphql-relay-connections/docs/tutorials/custom-cursors","docId":"tutorials/custom-cursors"}]},{"type":"link","label":"TypeGraphQL Example \ud83c\udfcb\ufe0f\u200d\u2642\ufe0f","href":"/typegraphql-relay-connections/docs/Examples","docId":"Examples"}]},"docs":{"api/connection-type":{"id":"api/connection-type","title":"ConnectionType \ud83e\udd94","description":"The ConnectionType function is the slightly more complicated of the two main functions. We\'ll define a full example below, but if we isolate the ConnectionType by itself you\'ll see it looks like this:","sidebar":"tutorialSidebar"},"api/edge-type":{"id":"api/edge-type","title":"EdgeType \ud83e\uddc0","description":"The EdgeType allows you to create a GraphQL relay edge ObjectType from a base type. ObjectTypes are what you can return from any graphql resolver, see the examples for more full implementations of how to connect to resolvers. We\'ll get to a more full and complete example of EdgeTypes below, but for now here is an isolated example showing how exactly the EdgeType is used.","sidebar":"tutorialSidebar"},"Examples":{"id":"Examples","title":"TypeGraphQL Example \ud83c\udfcb\ufe0f\u200d\u2642\ufe0f","description":"See the tests and the example folder for more examples.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Intro \ud83d\ude80","description":"This library provides a way to setup typings for TypeGraphQL with Relay Connection Types. Relay Connection Types are a great way to define pagination in an app. This libraries connection types follow the Relay Connection Type Server Standard. You may want to read up on relay if you\'re confused on what the benefits of relay connections to find out how exactly this library works. Particularly this library implements the second part of the standard, so it accomplishes: 2.) A description of how to page through connections, so you may want to check out the relevant section on connections in the relay GraphQL server standard.","sidebar":"tutorialSidebar"},"tutorials/custom-cursors":{"id":"tutorials/custom-cursors","title":"Extending the Builtin Cursor \ud83d\udcc4","description":"The default Cursor type allows any object value, but you may instead want to extend it with more properties and values which will allow autocomplete of those propety value pairs. You could do that like so:","sidebar":"tutorialSidebar"}}}')}}]);