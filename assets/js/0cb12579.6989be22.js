"use strict";(self.webpackChunktypegraphql_relay_connections_docs=self.webpackChunktypegraphql_relay_connections_docs||[]).push([[9199],{3580:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>a});var o=t(5893),i=t(1151);const s={sidebar_position:2},c="ConnectionType \ud83e\udd94",l={id:"usage/connection-type",title:"ConnectionType \ud83e\udd94",description:"The ConnectionType function is the slightly more complicated of the two main functions. We'll define a full example below, but if we isolate the ConnectionType by itself you'll see it looks like this:",source:"@site/docs/usage/connection-type.md",sourceDirName:"usage",slug:"/usage/connection-type",permalink:"/typegraphql-relay-connections/docs/usage/connection-type",draft:!1,unlisted:!1,editUrl:"https://github.com/johnsonjo4531/typegraphql-relay-connections/docs/blog/docs/usage/connection-type.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"EdgeType \ud83e\uddc0",permalink:"/typegraphql-relay-connections/docs/usage/edge-type"},next:{title:"Extending the Builtin Cursor \ud83d\udcc4",permalink:"/typegraphql-relay-connections/docs/tutorials/custom-cursors"}},r={},a=[];function p(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"connectiontype-",children:"ConnectionType \ud83e\udd94"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"ConnectionType"})," function is the slightly more complicated of the two main functions. We'll define a full example below, but if we isolate the ConnectionType by itself you'll see it looks like this:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"@ObjectType()\nexport class SongConnection extends ConnectionType(SongEdge) {\n  // You can add additional Types to your ConnectionType that are specific to it here:\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["To have a more complete example all you need to do is create a ",(0,o.jsx)(n.code,{children:"ObjectType"})," class, ",(0,o.jsx)(n.code,{children:"EdgeType"})," class, and then plug them in to the ",(0,o.jsx)(n.code,{children:"ConnectionType"})," class:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'import {ObjectType, Field} from "type-graphql";\nimport {EdgeType, ConnectionType} from "typegraphql-relay-connections";\n\n// This is our ObjectType:\n@ObjectType()\nclass Song {\n  @Field()\n  id!: string\n\n  @Field()\n  title!: string;\n}\n\n// This is the EdgeType:\n@ObjectType()\nexport class SongEdge extends EdgeType(Song) {}\n\n// This is the ConnectionType:\n@ObjectType()\nexport class SongConnection extends ConnectionType(SongEdge) {}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>c});var o=t(7294);const i={},s=o.createContext(i);function c(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);