"use strict";(self.webpackChunktypegraphql_relay_connections_docs=self.webpackChunktypegraphql_relay_connections_docs||[]).push([[273],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return g}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(t),g=o,m=d["".concat(l,".").concat(g)]||d[g]||u[g]||a;return t?r.createElement(m,s(s({ref:n},p),{},{components:t})):r.createElement(m,s({ref:n},p))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var c=2;c<a;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5304:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return u}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),s=["components"],i={sidebar_position:4},l="TypeGraphQL Example \ud83c\udfcb\ufe0f\u200d\u2642\ufe0f",c={unversionedId:"Examples",id:"Examples",title:"TypeGraphQL Example \ud83c\udfcb\ufe0f\u200d\u2642\ufe0f",description:"See the tests and the example folder for more examples.",source:"@site/docs/Examples.md",sourceDirName:".",slug:"/Examples",permalink:"/typegraphql-relay-connections/docs/Examples",editUrl:"https://github.com/johnsonjo4531/typegraphql-relay-connections/docs/blog/docs/Examples.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Extending the Builtin Cursor \ud83d\udcc4",permalink:"/typegraphql-relay-connections/docs/tutorials/custom-cursors"}},p={},u=[],d={toc:u};function g(e){var n=e.components,t=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"typegraphql-example-\ufe0f\ufe0f"},"TypeGraphQL Example \ud83c\udfcb\ufe0f\u200d\u2642\ufe0f"),(0,a.kt)("p",null,"See the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/johnsonjo4531/typegraphql-relay-connections/tree/main/src/__tests__/index.spec.ts"},"tests")," and the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/johnsonjo4531/typegraphql-relay-connections/tree/main/src/examples/index.example.ts"},"example")," folder for more examples."),(0,a.kt)("p",null,"Here's a full-fledged typegraphql server example (",(0,a.kt)("a",{parentName:"p",href:"https://codesandbox.io/s/typegraphql-relay-connections-6wl8ck?file=/src/index.ts"},"codesandbox link"),"):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import "reflect-metadata";\nimport { ApolloServer } from "apollo-server";\nimport {\n  ObjectType,\n  Field,\n  Resolver,\n  Query,\n  Mutation,\n  Arg,\n  InputType,\n  buildSchema,\n  Args\n} from "type-graphql";\nimport {\n  EdgeType,\n  ConnectionType,\n  BackwardPaginationArgs,\n  ForwardPaginationArgs\n} from "typegraphql-relay-connections";\nimport { edgesToReturn } from "./pagination.example";\n\n// Setup GraphQL Schema\n@ObjectType()\nclass Book {\n  @Field()\n  title!: string;\n  @Field()\n  author!: string;\n}\n\n@InputType()\nclass NewBookInput {\n  @Field()\n  title!: string;\n  @Field()\n  author!: string;\n}\n\n// setup relay connection types\n@ObjectType()\nclass BookEdge extends EdgeType(Book) {}\n\n@ObjectType()\nclass BookConnection extends ConnectionType({\n  edge: BookEdge,\n  node: Book\n}) {}\n\ndeclare module "typegraphql-relay-connections" {\n  interface Cursor {\n    id: string;\n  }\n}\n\n// usually you have some form of database this will do okay for an example\nconst books: Book[] = [\n  {\n    title: "Three Little Pigs",\n    author: "Joseph Jacobs"\n  },\n  {\n    title: "A Christmas Carol",\n    author: "Charles Dickens"\n  }\n];\n\n// Setup resolver\n@Resolver(Book)\nclass BookResolver {\n  @Query((returns) => BookConnection)\n  async searchBooksByTitle(\n    @Args() backwardPaging: BackwardPaginationArgs,\n    @Args() forwardPaging: ForwardPaginationArgs,\n    @Arg("title") title: string\n  ): Promise<BookConnection> {\n    const edges = edgesToReturn(\n      books\n        .filter((book) => book.title.includes(title))\n        .map((node) => ({\n          node,\n          cursor: {\n            id: node.title\n          }\n        })),\n      {}\n    );\n    return {\n      edges,\n      nodes: edges.map((x) => x.node),\n      pageInfo: {\n        hasNextPage: false,\n        hasPreviousPage: false,\n        endCursor: edges[edges.length - 1].cursor,\n        startCursor: edges[0].cursor,\n        count: edges.length\n      }\n    };\n  }\n\n  @Query((returns) => BookConnection)\n  async searchBooksByAuthor(\n    @Arg("author") title: string\n  ): Promise<BookConnection> {\n    const edges = edgesToReturn(\n      books\n        .filter((book) => book.author.includes(title))\n        .map((node) => ({\n          node,\n          cursor: {\n            id: node.title\n          }\n        })),\n      {}\n    );\n    return {\n      edges,\n      nodes: edges.map((x) => x.node),\n      pageInfo: {\n        hasNextPage: false,\n        hasPreviousPage: false,\n        endCursor: edges[edges.length - 1].cursor,\n        startCursor: edges[0].cursor,\n        count: edges.length\n      }\n    };\n  }\n\n  @Query((returns) => BookConnection)\n  async allBooks(): Promise<BookConnection> {\n    const edges = edgesToReturn(\n      books.map((node) => ({\n        node,\n        cursor: {\n          id: node.title\n        }\n      })),\n      {}\n    );\n    return {\n      edges,\n      nodes: edges.map((x) => x.node),\n      pageInfo: {\n        hasNextPage: false,\n        hasPreviousPage: false,\n        endCursor: edges[edges.length - 1].cursor,\n        startCursor: edges[0].cursor,\n        count: edges.length\n      }\n    };\n  }\n\n  @Mutation((returns) => Book)\n  async addBook(@Arg("newBookData") newBookData: NewBookInput) {\n    books.push(newBookData);\n    return newBookData;\n  }\n}\n\nconst PORT = 4000;\n\nasync function bootstrap() {\n  const schema = await buildSchema({\n    resolvers: [BookResolver]\n  });\n\n  // Create the GraphQL server\n  const server = new ApolloServer({\n    schema\n  });\n\n  // Start the server\n  const { url } = await server.listen(PORT);\n  console.log(`Server is running, GraphQL Playground available at ${url}`);\n}\n\nbootstrap();\n')))}g.isMDXComponent=!0}}]);